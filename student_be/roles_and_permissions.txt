=====================================================
HỆ THỐNG PHÂN QUYỀN - STUDENT MANAGEMENT SYSTEM
=====================================================

1. TỔNG QUAN VỀ HỆ THỐNG PHÂN QUYỀN
------------------------------------

Hệ thống quản lý sinh viên sử dụng mô hình phân quyền role-based (RBAC) dựa trên Django Permission Framework kết hợp với các custom permissions. Hệ thống phân quyền được thiết kế để đảm bảo:

- Quản lý truy cập chi tiết đến các chức năng và dữ liệu trong hệ thống
- Phân định rõ ràng vai trò người dùng và phạm vi quyền hạn
- Bảo mật thông tin nhạy cảm và dữ liệu cá nhân
- Khả năng mở rộng và tùy chỉnh quyền theo yêu cầu cụ thể

2. CÁC VAI TRÒ CHÍNH TRONG HỆ THỐNG
-----------------------------------

2.1. Quản trị viên (Administrator)
   - Vai trò: Quản lý toàn diện hệ thống
   - Nhóm người dùng: admin
   - Đối tượng: Nhân viên IT hoặc quản lý cấp cao
   - Quyền hạn: Truy cập đầy đủ vào tất cả các chức năng, dữ liệu và cài đặt

2.2. Giáo vụ (Academic Staff)
   - Vai trò: Quản lý học tập và giảng dạy
   - Nhóm người dùng: academic_staff
   - Đối tượng: Nhân viên phòng đào tạo, giáo vụ khoa
   - Quyền hạn: Quản lý sinh viên, lớp học, điểm số, lịch học nhưng không có quyền quản trị hệ thống

2.3. Giảng viên (Teacher)
   - Vai trò: Giảng dạy và đánh giá sinh viên
   - Nhóm người dùng: teachers
   - Đối tượng: Giáo viên, giảng viên, trợ giảng
   - Quyền hạn: Quản lý lớp dạy, nhập điểm, tạo bài tập, xem thông tin sinh viên trong lớp

2.4. Sinh viên (Student)
   - Vai trò: Người học trong hệ thống
   - Nhóm người dùng: students
   - Đối tượng: Học sinh, sinh viên đã đăng ký
   - Quyền hạn: Xem thông tin cá nhân, đăng ký môn học, xem điểm, tham gia lớp học

2.5. Phụ huynh (Parent)
   - Vai trò: Theo dõi quá trình học tập của sinh viên
   - Nhóm người dùng: parents
   - Đối tượng: Phụ huynh hoặc người giám hộ
   - Quyền hạn: Xem thông tin và kết quả học tập của sinh viên được liên kết

2.6. Khách (Guest)
   - Vai trò: Truy cập hạn chế vào hệ thống
   - Nhóm người dùng: guests
   - Đối tượng: Người dùng chưa đăng nhập, người dùng mới
   - Quyền hạn: Xem thông tin công khai, đăng ký tài khoản mới

3. CHI TIẾT PHÂN QUYỀN THEO MODULE
----------------------------------

3.1. Module Quản lý Người dùng (app_home)
   - Administrators:
     * Tạo, sửa, xóa tất cả tài khoản người dùng
     * Phân quyền và quản lý nhóm
     * Đặt lại mật khẩu
     * Khóa/mở khóa tài khoản
     * Xem nhật ký hoạt động

   - Academic Staff:
     * Xem danh sách người dùng
     * Tạo tài khoản sinh viên và giảng viên
     * Cập nhật thông tin cơ bản
     * Đặt lại mật khẩu cho sinh viên

   - Teachers:
     * Cập nhật thông tin cá nhân
     * Xem danh sách sinh viên được phân công

   - Students/Parents:
     * Cập nhật thông tin cá nhân
     * Đổi mật khẩu

3.2. Module Quản lý Sinh viên (app_student)
   - Administrators:
     * Đầy đủ quyền (CRUD) với tất cả hồ sơ sinh viên
     * Quản lý thông tin nhạy cảm (tài chính, kỷ luật)
     * Xóa vĩnh viễn hồ sơ

   - Academic Staff:
     * Tạo, cập nhật, vô hiệu hóa hồ sơ sinh viên
     * Quản lý thông tin học tập
     * Xem lịch sử học tập

   - Teachers:
     * Xem thông tin sinh viên trong lớp đang dạy
     * Cập nhật thông tin liên quan đến môn học

   - Students:
     * Xem và cập nhật thông tin cá nhân
     * Xem lịch sử học tập và điểm số

   - Parents:
     * Xem thông tin của sinh viên được liên kết

3.3. Module Quản lý Giảng viên (app_teacher)
   - Administrators:
     * Quản lý đầy đủ (CRUD) tất cả hồ sơ giảng viên
     * Phân công giảng dạy
     * Quản lý thông tin nhạy cảm (lương, đánh giá)

   - Academic Staff:
     * Tạo và cập nhật hồ sơ giảng viên
     * Phân công giảng dạy
     * Xem lịch dạy và hoạt động

   - Teachers:
     * Xem và cập nhật thông tin cá nhân
     * Xem lịch dạy và phân công
     * Yêu cầu điều chỉnh lịch dạy

   - Students:
     * Xem thông tin công khai của giảng viên
     * Đánh giá giảng viên sau khóa học

3.4. Module Quản lý Lớp học (app_class)
   - Administrators:
     * Tạo, sửa, xóa lớp học
     * Phân công giảng viên
     * Quản lý sĩ số và phòng học

   - Academic Staff:
     * Tạo và quản lý lớp học
     * Điều chỉnh lịch học và phòng học
     * Theo dõi tiến độ giảng dạy

   - Teachers:
     * Quản lý lớp được phân công
     * Điểm danh sinh viên
     * Cập nhật tiến độ giảng dạy
     * Tạo bài tập và tài liệu

   - Students:
     * Xem thông tin lớp học đã đăng ký
     * Tải tài liệu học tập
     * Nộp bài tập

3.5. Module Quản lý Môn học (app_subject)
   - Administrators/Academic Staff:
     * Tạo, cập nhật, vô hiệu hóa môn học
     * Thiết lập điều kiện tiên quyết
     * Quản lý nội dung chi tiết

   - Teachers:
     * Cập nhật nội dung môn học được phân công
     * Tạo tài liệu học tập
     * Thiết lập thang điểm đánh giá

   - Students:
     * Xem thông tin môn học
     * Đánh giá môn học sau khi hoàn thành

3.6. Module Quản lý Điểm số (app_score)
   - Administrators/Academic Staff:
     * Xem và điều chỉnh tất cả điểm số
     * Tạo báo cáo thống kê
     * Xuất bảng điểm chính thức

   - Teachers:
     * Nhập và cập nhật điểm cho lớp dạy
     * Thiết lập thang điểm đánh giá
     * Xuất báo cáo điểm lớp

   - Students:
     * Xem điểm cá nhân
     * Theo dõi tiến độ học tập và GPA
     * Nhận thông báo khi có điểm mới

   - Parents:
     * Xem điểm của sinh viên được liên kết

3.7. Module Đăng ký Học (app_enrollment)
   - Administrators/Academic Staff:
     * Mở/đóng đợt đăng ký học
     * Điều chỉnh hạn mức lớp học
     * Xử lý các trường hợp ngoại lệ

   - Teachers:
     * Xem danh sách sinh viên đăng ký
     * Yêu cầu điều chỉnh sĩ số

   - Students:
     * Đăng ký/hủy đăng ký môn học
     * Xem lịch học dự kiến
     * Thanh toán học phí

3.8. Module Quản lý Học kỳ (app_semester)
   - Administrators/Academic Staff:
     * Tạo và quản lý học kỳ
     * Thiết lập lịch học, lịch thi
     * Quản lý năm học

   - Teachers/Students:
     * Xem thông tin học kỳ hiện tại
     * Xem lịch học và lịch thi

3.9. Module Quản lý Hoạt động (app_activity)
   - Administrators:
     * Xem nhật ký hoạt động toàn hệ thống
     * Cấu hình loại hoạt động theo dõi
     * Xuất báo cáo hoạt động

   - Academic Staff:
     * Xem hoạt động liên quan đến học tập
     * Theo dõi hoạt động của nhóm người dùng

   - Teachers/Students:
     * Xem hoạt động của bản thân

4. TRIỂN KHAI PHÂN QUYỀN TRONG DJANGO
------------------------------------

Hệ thống phân quyền được triển khai thông qua:

4.1. Django Permission Framework
   - Model permissions: Tự động tạo cho mỗi model (add, change, view, delete)
   - Custom permissions: Định nghĩa trong Meta class của model
   - Permission checks: Kiểm tra quyền bằng @permission_required decorator và has_perm() method

4.2. Django Group System
   - Nhóm người dùng được thiết lập theo vai trò
   - Quyền được gán cho nhóm thay vì từng người dùng để dễ quản lý

4.3. Custom Permission Middleware
   - Xử lý kiểm tra quyền phức tạp hơn
   - Phân quyền theo bối cảnh (ví dụ: giáo viên chỉ thấy sinh viên trong lớp dạy)

4.4. Django Rest Framework Permissions
   - IsAuthenticated, IsAdminUser: Kiểm tra xác thực và admin
   - DjangoModelPermissions: Áp dụng quyền model Django cho API
   - Custom permission classes: Triển khai logic phân quyền phức tạp

5. ĐỊNH NGHĨA QUYỀN HẠN TRONG MÃ NGUỒN
-------------------------------------

5.1. Ví dụ về định nghĩa Custom Permissions trong Model

```python
class Student(models.Model):
    # Fields...
    
    class Meta:
        permissions = [
            ("can_view_student_details", "Có thể xem thông tin sinh viên"),
            ("can_manage_student", "Có thể quản lý sinh viên"),
            ("can_view_student_grades", "Có thể xem điểm sinh viên"),
            ("can_manage_student_enrollment", "Có thể quản lý đăng ký của sinh viên"),
        ]
```

5.2. Ví dụ về kiểm tra quyền trong Views

```python
from django.contrib.auth.decorators import permission_required

@permission_required('app_student.can_view_student_grades')
def view_grades(request, student_id):
    # Logic xem điểm
```

5.3. Ví dụ về phân quyền trong DRF API

```python
from rest_framework.permissions import BasePermission, SAFE_METHODS

class IsTeacherOrReadOnly(BasePermission):
    def has_permission(self, request, view):
        if request.method in SAFE_METHODS:
            return True
        return request.user.groups.filter(name='teachers').exists()
        
    def has_object_permission(self, request, view, obj):
        if request.method in SAFE_METHODS:
            return True
        # Giáo viên chỉ có thể chỉnh sửa lớp học mà họ được phân công
        return obj.teacher == request.user.teacher
```

6. THIẾT LẬP NHÓM VÀ QUYỀN TRONG ADMIN
-------------------------------------

Để thiết lập các nhóm và quyền trong Django Admin:

1. Tạo các nhóm (Groups):
   - Truy cập Admin > Authentication and Authorization > Groups
   - Tạo các nhóm theo vai trò: administrators, academic_staff, teachers, students, parents, guests

2. Gán quyền cho nhóm:
   - Chọn nhóm > Chọn quyền từ danh sách Available Permissions
   - Quyền được phân loại theo ứng dụng và model

3. Gán người dùng vào nhóm:
   - Chọn User > Groups > Chọn nhóm phù hợp

7. QUẢN LÝ PHÂN QUYỀN NÂNG CAO
-----------------------------

7.1. Object-Level Permissions
   - Phân quyền ở mức đối tượng cụ thể
   - Ví dụ: Giáo viên chỉ có thể sửa điểm của sinh viên trong lớp mình dạy

```python
def has_object_permission(request, view, obj):
    # Kiểm tra nếu người dùng là giáo viên và obj thuộc lớp của họ
    if request.user.is_teacher:
        return obj.class_id in request.user.teacher.classes.all()
    return False
```

7.2. Field-Level Permissions
   - Kiểm soát quyền ở mức trường dữ liệu
   - Ví dụ: Giáo viên có thể xem nhưng không thể sửa email của sinh viên

```python
class StudentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Student
        fields = '__all__'
        
    def get_fields(self):
        fields = super().get_fields()
        user = self.context['request'].user
        
        if not user.has_perm('app_student.can_edit_personal_info'):
            fields['email'].read_only = True
            fields['phone'].read_only = True
        
        return fields
```

7.3. Temporary Permissions (Quyền tạm thời)
   - Cấp quyền trong khoảng thời gian nhất định
   - Ví dụ: Giáo viên chỉ có thể nhập điểm trong thời gian nhất định

```python
def can_input_grades(user, course):
    today = timezone.now().date()
    grade_input_period = GradeInputPeriod.objects.filter(
        course=course,
        start_date__lte=today,
        end_date__gte=today
    ).exists()
    
    return grade_input_period and user.has_perm('app_score.add_score')
```

8. HƯỚNG DẪN SỬ DỤNG PHÂN QUYỀN CHO NHÀ PHÁT TRIỂN
-------------------------------------------------

8.1. Kiểm tra quyền trong templates

```html
{% if perms.app_student.can_view_student_grades %}
    <a href="{% url 'view_grades' student.id %}">Xem điểm</a>
{% endif %}
```

8.2. Kiểm tra quyền trong mã Python

```python
if request.user.has_perm('app_student.can_manage_student'):
    # Hiển thị nút quản lý sinh viên
```

8.3. Kiểm tra quyền trong API Views

```python
from rest_framework.permissions import BasePermission

class CanViewStudentGrades(BasePermission):
    def has_permission(self, request, view):
        return request.user.has_perm('app_student.can_view_student_grades')
```

9. BẢO MẬT VÀ KIỂM TOÁN
----------------------

9.1. Ghi nhật ký hoạt động phân quyền
   - Theo dõi các hành động thay đổi quyền
   - Ghi lại các lần truy cập bị từ chối do không đủ quyền

9.2. Kiểm tra bảo mật định kỳ
   - Rà soát cấu hình phân quyền
   - Xác định quyền không cần thiết hoặc quá mức
   - Điều chỉnh quyền theo nguyên tắc tối thiểu

9.3. Xử lý vi phạm
   - Phát hiện và cảnh báo các hành vi truy cập trái phép
   - Khóa tài khoản tạm thời sau nhiều lần vi phạm
   - Báo cáo các sự cố bảo mật

10. TÍCH HỢP VỚI HỆ THỐNG KHÁC
-----------------------------

10.1. Single Sign-On (SSO)
    - Tích hợp với dịch vụ xác thực trung tâm
    - Đồng bộ hóa thông tin người dùng và phân quyền

10.2. Đồng bộ hóa quyền
    - Cập nhật quyền tự động dựa trên vai trò trong hệ thống khác
    - Duy trì tính nhất quán của quyền giữa các hệ thống

11. KHẮC PHỤC SỰ CỐ PHÂN QUYỀN
----------------------------

11.1. Vấn đề thường gặp
    - Quyền không được áp dụng đúng cách
    - Xung đột giữa quyền cá nhân và quyền nhóm
    - Hiệu suất kém do kiểm tra quyền phức tạp

11.2. Cách khắc phục
    - Sử dụng debug toolbar để kiểm tra quyền
    - Tạo test case để xác minh cấu hình quyền
    - Tối ưu hóa truy vấn quyền bằng caching

==============================================
LƯU Ý QUAN TRỌNG VỀ TRIỂN KHAI
==============================================

1. Luôn áp dụng nguyên tắc "principle of least privilege" - chỉ cấp quyền tối thiểu cần thiết.
2. Kiểm tra quyền ở cả phía server (bắt buộc) và phía client (để cải thiện UX).
3. Không bao giờ tin tưởng input từ client mà không kiểm tra quyền trên server.
4. Sử dụng permissions_classes trong DRF thay vì tự triển khai kiểm tra quyền.
5. Thường xuyên rà soát và cập nhật cấu hình quyền khi có thay đổi trong yêu cầu nghiệp vụ. 